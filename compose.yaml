services:
  db:
    image: postgres:14.9
    restart: always
    networks:
      - default
    ports:
      - "5432:5432"
    env_file:
      - .env
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"
        ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  rabbitmq:
    image: rabbitmq:3.13-management
    restart: always
    networks:
      - default
    ports:
      - "5672:5672"
      - "15672:15672"
    env_file:
      - .env
    healthcheck:
      test: [ "CMD-SHELL", "rabbitmqctl node_health_check" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  initialdata:
    build:
      context: ./backend
      dockerfile: Dockerfile.initialdata
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
        restart: true
    networks:
      - default
    restart: on-failure

  backend:
    env_file:
      - .env
    restart: always
    networks:
      - default
    build:
      context: ./backend
      dockerfile: Dockerfile.backend
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
        restart: true
    volumes:
      - json_data:/json_data

  celery_worker:
    env_file:
      - .env
    restart: always
    networks:
      - default
    build:
      context: ./backend
      dockerfile: Dockerfile.celery
    depends_on:
      db:
        condition: service_healthy
        restart: true
      rabbitmq:
        condition: service_healthy
        restart: true
  
  frontend:
    env_file:
      - ./frontend/.env.local
    restart: always
    networks:
      - default
    build:
      context: ./frontend
      dockerfile: Dockerfile.frontend
    ports:
      - "3000:3000"

networks:
  default:
    driver: bridge

volumes:
  json_data:
